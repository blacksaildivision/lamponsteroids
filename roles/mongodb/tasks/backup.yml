# Get list of databases with backup enabled
#
- set_fact:
    mongodb_backup_databases: "{{ mongodb_backup_databases|default([]) + [item] }}"
  with_dict: "{{ mongodb_databases }}"
  when: "item.value.backup | default(false) == true"
  no_log: true
  tags: [ mongodb ]



# Create user for backups
#
- name: Create dedicated user for backups
  mongodb_user:
    database: admin
    login_host: "{{ mongodb_host }}"
    login_password: "{{ mongodb_admin_password }}"
    login_user: admin
    name: backup
    password: "{{ mongodb_backup_user_password }}"
    roles:
      - backup
    update_password: on_create
    ssl: true
    ssl_ca_certs: /var/lib/mongo/tls/server-ca.crt
  when: "mongodb_backup_databases is defined"
  tags: [ mongodb ]



# Make sure that backup directory exists
#
- name: Make sure that backup directory exists
  file:
    path: "{{ item.value.backup_directory }}"
    state: directory
    mode: "2775"
    owner: "{{ item.value.backup_directory_owner | default('root') }}"
    group: "{{ item.value.backup_directory_group | default('root') }}"
  with_items: "{{ mongodb_backup_databases }}"
  when: "mongodb_backup_databases is defined"
  no_log: true
  tags: [ mongodb ]



# Place backup script in place for each database
#
- name: Setup backup scripts
  template:
    src: backup-script.sh.j2
    dest: "{{ item.value.backup_directory }}/{{ item.key }}-backup.sh"
    owner: "{{ item.value.backup_directory_owner | default('root') }}"
    group: "{{ item.value.backup_directory_group | default('root') }}"
    mode: 0700
  with_items: "{{ mongodb_backup_databases }}"
  when: "mongodb_backup_databases is defined"
  no_log: true
  tags: [ mongodb ]



# Setup cronjob for backups
#
- name: Setup crontab for periodical backups
  cron:
    name: "{{ item.key }} mongodb backup"
    special_time: "{{ item.value.backup_frequency | default('daily') }}"
    job: "bash {{ item.value.backup_directory }}/{{ item.key }}-backup.sh >> {{ item.value.backup_directory }}/{{ item.key }}-backup.log 2>&1"
  with_items: "{{ mongodb_backup_databases }}"
  when: "mongodb_backup_databases is defined"
  no_log: true
  tags: [ mongodb ]
