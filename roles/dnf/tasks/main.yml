# Enable the GPG check in the DNF configuration. DNF should always verify the signature before installing a package.
# Main configuration is located in /etc/dnf/dnf.conf file, but you should also check all files in /etc/yum.repos.d directory.
#
- name: Enable GPG check in the /etc/dnf/dnf.conf file
  ansible.builtin.lineinfile:
    path: /etc/dnf/dnf.conf
    line: "gpgcheck=1"
    state: present
  tags: [dnf]

- name: Find all repo files in /etc/yum.repos.d directory
  ansible.builtin.find:
    paths: /etc/yum.repos.d
    patterns: "*.repo"
  register: dnf_repositories
  tags: [dnf]

- name: Enable GPG check in all repositories inside /etc/yum.repos.d
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: "^gpgcheck=0"
    replace: "gpgcheck=1"
  with_items: "{{ dnf_repositories.files }}"
  tags: [dnf]


# Using dnf-automatic can speed up downloading and installing packages. It periodically checks for new updates and downloads them without installing them.
# It speeds up installation because the packages don't have to be downloaded during the installation task â€” they are already in place.
#
- name: Install dnf-automatic
  ansible.builtin.dnf:
    name: dnf-automatic
    state: latest
  tags: [dnf]

- name: Download packages only; do not install them using dnf-automatic
  ansible.builtin.lineinfile:
    path: /etc/dnf/automatic.conf
    line: "apply_updates = no"
    state: present
  notify: Restart dnf-automatic
  tags: [dnf]

- name: Start dnf-automatic service and enable it on start
  ansible.builtin.service:
    name: dnf-automatic-download.timer
    state: started
    enabled: true
  tags: [dnf]


# Tasks here include installing and updating the packages you have already installed.
# You can exclude specific packages if you don't want to update or install them with this role.
#  Please check the README.md file for proper configuration in this role.
#
- name: Get the list of packages to upgrade
  ansible.builtin.dnf:
    list: upgrades
  register: dnf_packages_before_upgrade
  tags: [dnf]

- name: Upgrade packages to the latest versions
  ansible.builtin.dnf:
    name: "*"
    state: latest
    exclude: "{{ dnf_exclude_packages_to_upgrade }}"
  notify:
    - Get remaining upgrades
    - Show upgraded packages
  tags: [dnf]

- name: Install user-specified packages
  ansible.builtin.dnf:
    name: "{{ dnf_packages_to_install }}"
    state: latest
  tags: [dnf]


# Remove packages from the server provided by the user and auto-remove packages that are unused on the server.
#
- name: Remove packages
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: removed
  with_items: "{{ dnf_packages_to_remove }}"
  tags: [dnf]

- name: Auto-remove unused packages
  ansible.builtin.dnf:
    autoremove: true
  tags: [dnf]


# You can exclude some packages and perform manual updates, for instance, by using a different role, like MySQL.
# The packages that DNF did not update will be listed here.
#
- name: Get the list of non-updated packages
  ansible.builtin.dnf:
    list: upgrades
  register: dnf_not_upgraded
  tags: [dnf]

- name: List the packages available for upgrade
  ansible.builtin.debug:
    msg: "{{ dnf_not_upgraded.results | map(attribute='name') | unique | join(', ') }}"
  when: "dnf_not_upgraded.results | length > 0"
  tags: [dnf]
