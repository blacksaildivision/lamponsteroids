# Get list of databases with backup enabled
#
- set_fact:
    mysql_backup_databases: "{{ mysql_backup_databases|default([]) + [item] }}"
  with_dict: "{{ mysql_databases }}"
  when: "item.value.backup | default(false) == true"
  no_log: true
  tags: [mysql]



# Create database backup user and grand him permissions to database for backup
#
- name: Create user for backups
  community.mysql.mysql_user:
    name: "{{ mysql_backup_user }}"
    plugin: caching_sha2_password
    plugin_auth_string: "{{ mysql_backup_user_password }}"
    salt: "{{ mysql_backup_user_salt }}"
    host: "{{ mysql_root_host }}"
    state: present
    priv: "{{ mysql_backup_databases | map(attribute='key') |  map('regex_replace', '^(.*)$', '\\1.*:SELECT') | list | join('/') + '/*.*:FLUSH_TABLES' }}"
    login_host: "{{ mysql_root_host }}"
  no_log: true
  when: "mysql_backup_databases is defined"
  tags: [mysql]



# Make sure that backup directories exists
#
- name: Make sure that backup directory exists
  file:
    path: "{{ item.value.backup_directory }}"
    state: directory
    mode: "2775"
    owner: "{{ item.value.backup_directory_owner | default('root') }}"
    group: "{{ item.value.backup_directory_group | default('root') }}"
  with_items: "{{ mysql_backup_databases }}"
  when: "mysql_backup_databases is defined"
  no_log: true
  tags: [mysql]



# Place backup script in place for each database
#
- name: Setup backup scripts
  template:
    src: backup-script.sh.j2
    dest: "{{ item.value.backup_directory }}/{{ item.key }}-backup.sh"
    owner: "{{ item.value.backup_directory_owner | default('root') }}"
    group: "{{ item.value.backup_directory_group | default('root') }}"
    mode: 0700
  with_items: "{{ mysql_backup_databases }}"
  when: "mysql_backup_databases is defined"
  no_log: true
  tags: [mysql]



# Setup cronjob for backups
#
- name: Setup crontab for periodical backups
  cron:
    name: "{{ item.key }} mysql backup"
    special_time: "{{ item.value.backup_frequency | default('daily') }}"
    job: "bash {{ item.value.backup_directory }}/{{ item.key }}-backup.sh >> {{ item.value.backup_directory }}/{{ item.key }}-backup.log 2>&1"
  with_items: "{{ mysql_backup_databases }}"
  when: "mysql_backup_databases is defined"
  no_log: true
  tags: [mysql]
