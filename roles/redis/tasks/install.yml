# Install required software for compiling Redis from source
#
- name: Install epel-release package
  dnf:
    name: epel-release
    state: latest
  tags: [redis]

- name: Install required tools for compiling Redis
  dnf:
    name: [gcc, make, systemd-devel, tar, openssl-devel, lua]
    state: latest
  tags: [redis]



# Download and unpack source code for building Redis.
# Easiest method it to download it from Redis download page:
# https://redis.io/download
#
- name: Download Redis source files
  get_url:
    dest: "{{ redis_sources_path }}"
    url: "https://download.redis.io/releases/redis-{{ redis_version }}.tar.gz"
  tags: [redis]

- name: Unpack downloaded Redis sources
  unarchive:
    src: "{{ redis_sources_path }}/redis-{{ redis_version }}.tar.gz"
    dest: "{{ redis_sources_path }}"
    owner: "{{ redis_build_user }}"
    group: "{{ redis_build_group }}"
    copy: no
    creates: "{{ redis_sources_path }}/redis-{{ redis_version }}"
  tags: [redis]



# Compile and install Redis
# It will be compiled by using different user than root.
#
- name: Compile Redis
  command: make MALLOC=libc BUILD_TLS=yes
  args:
    chdir: "{{ redis_sources_path }}/redis-{{ redis_version }}"
  become: true
  become_user: "{{ redis_build_user }}"
  tags: [redis]

- name: Create Redis directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
    owner: root
    group: root
  with_items:
    - "{{ redis_install_path }}/bin"
    - "{{ redis_install_path }}/tls"
  tags: [redis]

- name: Copy compiled binaries to installation directory
  copy:
    src: "{{ redis_sources_path }}/redis-{{ redis_version }}/src/{{ item }}"
    dest: "{{ redis_install_path }}/bin"
    remote_src: yes
    owner: root
    group: root
    mode: 0755
  with_items:
    - redis-benchmark
    - redis-check-aof
    - redis-check-rdb
    - redis-cli
    - redis-server
  notify: restart redis
  tags: [redis]

- name: Copy redis.conf file from sources to installation path
  copy:
    src: "{{ redis_sources_path }}/redis-{{ redis_version }}/redis.conf"
    dest: "{{ redis_install_path }}"
    remote_src: yes
    owner: root
    group: root
    mode: 0644
  tags: [redis]



# Make sure that dedicated redis daemon user and group exists
#
- name: Create dedicated redis group
  group:
    name: redis
    state: present
  tags: [redis]

- name: Create dedicated redis user
  user:
    name: redis
    createhome: no
    group: redis
    state: present
    shell: /sbin/nologin
  tags: [redis]



# Generate and copy SSL certificates for TLS connection
#
- name: Generate SSL certificates
  shell: /usr/bin/bash gen-test-certs.sh
  args:
    chdir: "{{ redis_sources_path }}/redis-{{ redis_version }}/utils"
  tags: [redis]

- name: Copy generated SSL certificates to installation directory
  copy:
    src: "{{ redis_sources_path }}/redis-{{ redis_version }}/utils/tests/tls/{{ item }}"
    dest: "{{ redis_install_path }}/tls"
    remote_src: yes
    owner: redis
    group: redis
    mode: 0600
    force: no
  with_items:
    - redis.crt
    - redis.key
    - ca.crt
    - redis.dh
  tags: [redis]



# Remove downloaded sources after installation
#
- name: Cleanup files after installation
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ redis_sources_path }}/redis-{{ redis_version }}.tar.gz"
    - "{{ redis_sources_path }}/redis-{{ redis_version }}"
  tags: [redis]
